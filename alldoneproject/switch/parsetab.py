
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSBOOLEAN BREAK CASE COLON CONSTANT DEFAULT ID LBRACE LPAREN MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON SWITCHswitch_statement : SWITCH LPAREN CONSTANT RPAREN LBRACE case_statements DEFAULT COLON statements RBRACEcase_statements : case_statement case_statements\n                      | emptycase_statement : CASE CONSTANT COLON statementsstatements : statement statements\n                 | emptystatement : BREAK SEMICOLON\n                 | other_statementsother_statements : CONSTANT SEMICOLON\n                       | expression SEMICOLONexpression : NUMBER\n                  | BOOLEAN\n                  | IDempty :'
    
_lr_action_items = {'SWITCH':([0,],[2,]),'$end':([1,28,],[0,-1,]),'LPAREN':([2,],[3,]),'CONSTANT':([3,10,14,15,18,21,27,30,31,],[4,13,16,16,16,-8,-9,-7,-10,]),'RPAREN':([4,],[5,]),'LBRACE':([5,],[6,]),'CASE':([6,8,15,18,19,21,26,27,29,30,31,],[10,10,-14,-14,-6,-8,-4,-9,-5,-7,-10,]),'DEFAULT':([6,7,8,9,12,15,18,19,21,26,27,29,30,31,],[-14,11,-14,-3,-2,-14,-14,-6,-8,-4,-9,-5,-7,-10,]),'COLON':([11,13,],[14,15,]),'BREAK':([14,15,18,21,27,30,31,],[20,20,20,-8,-9,-7,-10,]),'RBRACE':([14,17,18,19,21,27,29,30,31,],[-14,28,-14,-6,-8,-9,-5,-7,-10,]),'NUMBER':([14,15,18,21,27,30,31,],[23,23,23,-8,-9,-7,-10,]),'BOOLEAN':([14,15,18,21,27,30,31,],[24,24,24,-8,-9,-7,-10,]),'ID':([14,15,18,21,27,30,31,],[25,25,25,-8,-9,-7,-10,]),'SEMICOLON':([16,20,22,23,24,25,],[27,30,31,-11,-12,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'switch_statement':([0,],[1,]),'case_statements':([6,8,],[7,12,]),'case_statement':([6,8,],[8,8,]),'empty':([6,8,14,15,18,],[9,9,19,19,19,]),'statements':([14,15,18,],[17,26,29,]),'statement':([14,15,18,],[18,18,18,]),'other_statements':([14,15,18,],[21,21,21,]),'expression':([14,15,18,],[22,22,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> switch_statement","S'",1,None,None,None),
  ('switch_statement -> SWITCH LPAREN CONSTANT RPAREN LBRACE case_statements DEFAULT COLON statements RBRACE','switch_statement',10,'p_switch_statement','parser_switch.py',11),
  ('case_statements -> case_statement case_statements','case_statements',2,'p_case_statements','parser_switch.py',16),
  ('case_statements -> empty','case_statements',1,'p_case_statements','parser_switch.py',17),
  ('case_statement -> CASE CONSTANT COLON statements','case_statement',4,'p_case_statement','parser_switch.py',22),
  ('statements -> statement statements','statements',2,'p_statements','parser_switch.py',27),
  ('statements -> empty','statements',1,'p_statements','parser_switch.py',28),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','parser_switch.py',33),
  ('statement -> other_statements','statement',1,'p_statement','parser_switch.py',34),
  ('other_statements -> CONSTANT SEMICOLON','other_statements',2,'p_other_statements','parser_switch.py',39),
  ('other_statements -> expression SEMICOLON','other_statements',2,'p_other_statements','parser_switch.py',40),
  ('expression -> NUMBER','expression',1,'p_expression','parser_switch.py',45),
  ('expression -> BOOLEAN','expression',1,'p_expression','parser_switch.py',46),
  ('expression -> ID','expression',1,'p_expression','parser_switch.py',47),
  ('empty -> <empty>','empty',0,'p_empty','parser_switch.py',52),
]
